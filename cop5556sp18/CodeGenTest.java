/**
 * Starter code with JUnit tests for code generation used in the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Spring 2018.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Spring 2018 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2018
 */


package cop5556sp18;

import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.swing.JFrame;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp18.CodeGenUtils.DynamicClassLoader;
import cop5556sp18.AST.Program;

public class CodeGenTest {

	//determines whether show prints anything
	static boolean doPrint = false;;

	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	//determines whether a classfile is created
	static boolean doCreateFile = true;

	@Rule
	public ExpectedException thrown = ExpectedException.none();


	//values passed to CodeGenerator constructor to control grading and debugging output
	private boolean devel = true; //if true, print devel output
	private boolean grade = true; //if true, print grade output

	//	private boolean devel = false; 
	//	private boolean grade = false; 

	//sets the default width and height of newly created images.  Should be small enough to fit on screen.
	public static final int defaultWidth = 1024;
	public static final int defaultHeight = 1024;


	/**
	 * Generates bytecode for given input.
	 * Throws exceptions for Lexical, Syntax, and Type checking errors
	 * 
	 * @param input   String containing source code
	 * @return        Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {

		//scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeChecker v = new TypeChecker();
		program.visit(v, null);
		//		show(program);  //It may be useful useful to show this here if code generation fails

		//generate code
		CodeGenerator cv = new CodeGenerator(devel, grade, null, defaultWidth, defaultHeight);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		show(program); //doing it here shows the values filled in during code gen
		//display the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));

		//write byte code to file 
		if (doCreateFile) {
			String name = ((Program) program).progName;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}

		//return generated classfile as byte array
		return bytecode;
	}

	/**
	 * Run main method in given class
	 * 
	 * @param className    
	 * @param bytecode    
	 * @param commandLineArgs  String array containing command line arguments, empty array if none
	 * @throws + 
	 * @throws Throwable 
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception  {
		RuntimeLog.initLog(); //initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		@SuppressWarnings("rawtypes")
		Class[] argTypes = {commandLineArgs.getClass()};
		Method m = testClass.getMethod("main", argTypes );
		show("Output from " + m + ":");  //print name of method to be executed
		Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
		try {
			m.invoke(null, passedArgs);	
		}
		catch (Exception e) {
			Throwable cause = e.getCause();
			if (cause instanceof Exception) {
				Exception ec = (Exception) e.getCause();
				throw ec;
			}
			throw  e;
		}
	}


	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, waitForKey will pause until a key is pressed.
	 * 
	 * @throws IOException
	 */
	void waitForKey() throws IOException {
		System.out.println("enter any char to exit");
		System.in.read();
	}

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, keepFrame will keep the frame visible for 5000 milliseconds.
	 * 
	 * @throws Exception
	 */
	void keepFrame() throws Exception {
		Thread.sleep(5000);
	}






	/**
	 * Since we are not doing any optimization, the compiler will 
	 * still create a class with a main method and the JUnit test will
	 * execute it.  
	 * 
	 * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
	 * 
	 * @throws Exception
	 */
	@Test
	public void emptyProg() throws Exception {
		String prog = "emptyProg";	
		String input = prog + "{}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n "+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}



	@Test
	public void integerLit() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show !2;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-3;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit1() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 2.0**2.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;4.0;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit2() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 2.0**2;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;4.0;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit3() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 2**2.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;4.0;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit4() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show !true;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit5() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show !false;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit6() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 3+4;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit7() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 3+4.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7.0;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit8() throws Exception {
		String prog = "prog";
		String input = prog + "{image y[512,256];\n show y; sleep 100;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}


	@Test
	public void integerlit9() throws Exception {
		String prog = "prog";
		String input = prog + "{show !1; show !-1; show !0; show !-2;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-2;0;-1;1;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit10() throws Exception {
		String prog = "prog";
		String input = prog + "{show -3; show -4.5; show -3-4.5;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-3;-4.5;-7.5;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit11() throws Exception {
		String prog = "prog";
		String input = prog + "{show -5-3;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-8;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit12() throws Exception {
		String prog = "prog";
		String input = prog + "{boolean y; y := true; show y; y := false; show y;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;false;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit13() throws Exception {
		String prog = "prog";
		String input = prog + "{boolean y;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit14() throws Exception {
		String prog = "prog";
		String input = prog + "{boolean y; show true;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit15() throws Exception {
		String prog = "prog";
		String input = prog + "{int y; y:=10 ;show y;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit16() throws Exception {
		String prog = "prog";
		String input = prog + "{int y; y := 55; show y; y := -234; show y;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;55;-234;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit17() throws Exception {
		String prog = "prog";
		String input = prog + "{show 1 --2 * 3 & 14;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;6;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit18() throws Exception {
		String prog = "prog";
		String input = prog + "{int a; a := int(-3.7); show a; a := int(4); show a;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-3;4;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit19() throws Exception {
		String prog = "prog";
		String input = prog + "{int a; a := 123456789; show alpha(a);\n a := -1; show alpha(a);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void integerlit20() throws Exception {
		String prog = "prog";
		String input = prog + "{int a; a := 123456789; show red(a);\n a := -1; show red(a);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;91;255;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit21() throws Exception {
		String prog = "prog";
		String input = prog + "{int a; a := 123456789; show blue(a);\n a := -1; show blue(a);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;21;255;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit22() throws Exception {
		String prog = "prog";
		String input = prog + "{int a; a := 123456789; show green(a);\n a := -1; show green(a);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;205;255;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit23() throws Exception {
		String prog = "prog";
		String input = prog + "{show abs(1); show abs(-1); show abs(5.3); show abs(-5.3); show abs(1-5.3);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;1;5.3;5.3;4.3;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit24() throws Exception {
		String prog = "prog";
		String input = prog + "{int a; a := 123456789;\n show red(a); show green(a); show blue(a);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;91;205;21;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit25() throws Exception {
		String prog = "prog";
		String input = prog + "{float y; y := 6.6; show y; y := -0.5; show y;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;6.6;-0.5;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit26() throws Exception {
		String prog = "prog";
		String input = prog + "{image y;\n show y; sleep 100;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit27() throws Exception {
		String prog = "prog";
		String input = prog + "{image b[512,256]; show width(b); show height(b);\n image c; show width(c); show height(c);show b; sleep 100;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;512;256;1024;1024;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit28() throws Exception {
		String prog = "prog";
		String input = prog + "{filename f1;\n filename f2; \n input f1 from @ 0 ;\n f2 := f1;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"filepath"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit30() throws Exception {
		String prog = "prog";
		String input = prog + "{image y; input y from @ 0 ; show y; sleep 100;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"/Users/adityavashist/Documents/PLP/Assignment6/PLPHomework/ScreenShot2016-05-22at4.16.35PM.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit29() throws Exception {
		String prog = "prog";
		String input = prog + "{int x; input x from @ 0 ; show x;"
				+ "\n float y; input y from @ 1; show y;"
				+ "\n boolean z; input z from @ 2; show z;"
				+ "\n input z from @ 3; show z;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"1","1.0","true","false"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;1.0;true;false;leaving main;",RuntimeLog.globalLog.toString());
	}


	@Test
	public void integerlit31() throws Exception {
		String prog = "prog";
		String input = prog + "{image y[300,400];\n input y from @ 0 ;\n show y; sleep 100;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"/Users/adityavashist/Documents/PLP/Assignment6/PLPHomework/ScreenShot2016-05-22at4.16.35PM.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerlit32() throws Exception {
		String prog = "prog";
		String input = prog + "{image y; image copy[128,256]; input y from @ 0 ; show y; copy := y; show copy; sleep 100;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"/Users/adityavashist/Documents/PLP/Assignment6/PLPHomework/ScreenShot2016-05-22at4.16.35PM.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}


	@Test
	public void integerlit33() throws Exception {
		String prog = "prog";
		String input = prog + "{image x; input x from @ 0 ; show x; image y; y := x; show y; sleep 100;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"/Users/adityavashist/Documents/PLP/Assignment6/PLPHomework/ScreenShot2016-05-22at4.16.35PM.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}


	@Test
	public void integerlit34() throws Exception {
		String prog = "prog";
		String input = prog + "{image x; input x from @ 0 ; show x; sleep 100;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit35() throws Exception {
		String prog = "prog";
		String input = prog + "{show sin(10.0); show cos(-10.0);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-0.5440211;-0.8390715;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit36() throws Exception {
		String prog = "prog";
		String input = prog + "{show log(1.0); show atan(0.5);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0.0;0.4636476;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit37() throws Exception {
		String prog = "prog";
		String input = prog + "{image y[300,400];\n input y from @ 0 ; \n show y; sleep 100;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit38() throws Exception {
		String prog = "prog";
		String input = prog + "{int x; input x from @ 0; int y; input y from @ 1; if (x < y) {show y;}; if (x>y) {show x;}; if (x == y) {show 0;};}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"10","11"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;11;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit39() throws Exception {
		String prog = "prog";
		String input = prog + "{int x; x := 3; int y; y := 4; if (x < y) {show x;}; if (x>y) {show x;}; show y;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;4;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit40() throws Exception {
		String prog = "prog";
		String input = prog + "{show cart_x[10.0,3.14159];} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-10;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit57() throws Exception {
		String prog = "prog";
		String input = prog + "{show cart_x[2.236068, 1.1071488];} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	
	@Test
	public void integerlit43() throws Exception {
		String prog = "prog";
		String input = prog + "{show cart_y[9.81,3.14];} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit41() throws Exception {
		String prog = "prog";
		String input = prog + "{show polar_a[9,10];} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0.8379812;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit42() throws Exception {
		String prog = "prog";
		String input = prog + "{show polar_r[10,10];} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;14.142136;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void integerlit44() throws Exception {
		String prog = "prog";
		String input = prog + "{int x; input x from @ 0; int y; input y from @ 1; if (x < y) {show y;}; if (x>y) {show x;}; if (x == y) {show 0;};}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"10","10"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit45() throws Exception {
		String prog = "prog";
		String input = prog + "{int x; input x from @ 0; int y; input y from @ 1; if (x < y) {show y;}; if (x>y) {show x;}; if (x == y) {show 0;};}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"11","10"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;11;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit46() throws Exception {
		String prog = "prog";
		String input = prog + "{int x; input x from @ 0; while (x > 0) {show x; x := x-1;};}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"5"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;4;3;2;1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit47() throws Exception {
		String prog = "prog";
		String input = prog + "{int x; int y; int z; x:=10;y:=11; z:= (x>y)?  x : y; show z;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"5"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;11;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit48() throws Exception {
		String prog = "prog";
		String input = prog + "{float x; x:=10.4 ; if(x!=10.0) {show x;};}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"11.0","10.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10.4;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit53() throws Exception {
		String prog = "prog";
		String input = prog + "{float x; x:=10.4 ; if(x==10.4) {show x;};}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"11.0","10.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10.4;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit49() throws Exception {
		String prog = "prog";
		String input = prog + "{image bird; input bird from @0; show bird;sleep(400); image bird2[width(bird),height(bird)]; int x;x:=0;while(x<width(bird2)) {int y; y:=0;while(y<height(bird2)) {blue(bird2[x,y]):=red(bird[x,y]); green(bird2[x,y]):=blue(bird[x,y]); red(bird2[x,y]):=green(bird[x,y]); alpha(bird2[x,y]):=Z; y:=y+1;}; x:=x+1;}; show bird2;sleep(400);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit50() throws Exception {
		String prog = "prog";
		String input = prog + "{image h;input h from @0;show h; sleep(400); image g[width(h),height(h)];int x;x:=0; while(x<width(g)){int y;y:=0;while(y<height(g)){g[x,y]:=h[y,x];y:=y+1;};x:=x+1;};show g;sleep(400);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit51() throws Exception {
		String prog = "prog";
		String input = prog + "{image im[256,256]; int x;int y;x:=0;y:=0; while(x<width(im)) {y:=0; while(y<height(im)) {im[x,y]:=<<255,255,0,0>>; y:=y+1;}; x:=x+1;}; show im; sleep 400;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit52() throws Exception {
		String prog = "prog";
		String input = prog + "{image im[1024,1024]; int x;x:=0;while(x<width(im)) {int y;y:=0;while(y<height(im)) { float p;p:=polar_r[x,y]; int r;r:=int(p)%Z; im[x,y]:=<<Z,0,0,r>>; y:=y+1;};x:=x+1;}; show im; sleep 4000;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit54() throws Exception {
		String prog = "prog";
		String input = prog + "{float x; x := 10.4; float y; y := 11.0; if(x>=y) {show x;}; if(x<y) {show y;};}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"11.0","10.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;11.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit55() throws Exception {
		String prog = "prog";
		String input = prog + "{float x; x:=10.4; float y; y:= 11.0; if(x<=y) {show x;}; if(x>y) {show y;};}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"11.0","10.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10.4;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit56() throws Exception {
		String prog = "prog";
		String input = prog + "{float x; x:=11.0; float y; y:= 11.0; if(x>=y) {show x;}; if(x<=y) {show y;};}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"11.0","10.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;11.0;11.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit58() throws Exception {
		String prog = "prog";
		String input = prog + "{ boolean a; boolean b; a:=true; b:=false; show (a>=b);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"11.0","10.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit59() throws Exception {
		String prog = "prog";
		String input = prog + "{ show !5;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"11.0","10.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-6;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit60() throws Exception {
		String prog = "prog";
		String input = prog + "{image im[600,400];  input im from @ 0; filename f1; input f1 from @ 1; write im to f1; }";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg","/Users/adityavashist/Documents/PLP/Assignment6/PLPHomework/try.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit61() throws Exception {
		String prog = "prog";
		String input = prog + "{image im[600,400];  input im from @ 0; show im[3, 2]; }";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg","/Users/adityavashist/Documents/PLP/Assignment6/PLPHomework/try.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-1511949;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit62() throws Exception {
		String prog = "prog";
		String input = prog + "{image im[600,400];  input im from @ 0; show im[3.5, 2.5]; }";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg","/Users/adityavashist/Documents/PLP/Assignment6/PLPHomework/try.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit63() throws Exception {
		String prog = "prog";
		String input = prog + "{image im[600,400];  input im from @ 0; show im[4.4721359549996, 1.1071487177941]; }";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg","/Users/adityavashist/Documents/PLP/Assignment6/PLPHomework/try.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-1511949;leaving main;",RuntimeLog.globalLog.toString());
		// expected 1511949
	}
	
	@Test
	public void integerlit64() throws Exception {
		String prog = "prog";
		String input = prog + "{image im[600,400];  input im from @ 0; show im[2, 4]; }";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg","/Users/adityavashist/Documents/PLP/Assignment6/PLPHomework/try.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-1511949;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit65() throws Exception {
		String prog = "prog";
		String input = prog + "{ int x; x := 4; image c; while(x != 0) { show c; int c; c := 4; x := x - 1; c := c + x; show c; }; show x; }";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg","/Users/adityavashist/Documents/PLP/Assignment6/PLPHomework/try.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;6;5;4;0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerlit66() throws Exception {
		String prog = "prog";
		String input = prog + "{show <<25,137,10,67>>; show <<1000,-50,1000,-10>>;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.argospetinsurance.co.uk/assets/uploads/2017/12/cat-pet-animal-domestic-104827.jpeg","/Users/adityavashist/Documents/PLP/Assignment6/PLPHomework/try.jpeg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;428411459;-16711936;leaving main;",RuntimeLog.globalLog.toString());
	}

	
}